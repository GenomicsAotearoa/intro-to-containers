{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reproducible computational environments using containers","text":"<p>This lesson provides an introduction to using the Apptainer container platform. Apptainer is particularly suited to running containers on infrastructure where users don\u2019t have administrative privileges, for example shared infrastructure such as High Performance Computing (HPC) clusters.</p> <p>This lesson will introduce Apptainer from scratch showing you how to run a simple container and building up to creating your own containers and running parallel scientific workloads on HPC infrastructure.</p> <p>Schedule</p> <ol> <li>Getting Started with Containers <ul> <li>What is a container and why might I want to use it?</li> </ul> </li> <li>The Container Cache Why does Apptainer use a local cache?<ul> <li>Where does Apptainer store images?</li> <li>How do I configure my cache ?</li> </ul> </li> <li>Using containers to run commands <ul> <li>How do I use container software on the cluster?</li> <li>How do I run different commands within a container?</li> <li>How do I access an interactive shell within a container?</li> </ul> </li> <li> <p>Files in containers </p> <ul> <li>How do I make data available in a container?</li> <li>What data is made available by default in a container?</li> </ul> </li> <li> <p>Creating Container Images </p> <ul> <li>How can I make my own Apptainer container images?</li> <li>How do I document the \u2018recipe\u2019 for a Apptainer container image</li> </ul> </li> <li>Building Container Images <ul> <li>How do I create my own Apptainer images?</li> </ul> </li> </ol>"},{"location":"1.getting-started-with-containers/","title":"1. Getting Started with Containers","text":"<p>Overview</p> <p>Questions - What is a container and why might I want to use it?</p> <p>Objectives Understand what a container is and when you might want to use it.</p> <p>The episodes in this lesson will introduce you to the Apptainer container platform and demonstrate how to set up and use Apptainer.</p>"},{"location":"1.getting-started-with-containers/#what-are-containers","title":"What are Containers","text":"<p>A container is an entity providing an isolated software environment (or filesystem) for an application and its dependencies.</p> <p>If you have already used a Virtual Machine, or VM, you\u2019re actually already familiar with some of the concepts of a container.</p> <p></p> <p>The key difference here is that VMs virtualise hardware while containers virtualise operating systems. There are other differences (and benefits), in particular containers are:</p> <ul> <li>lighter weight to run (less CPU and memory usage, faster start-up times)</li> <li>smaller in size (thus easier to transfer and share)</li> <li>modular (possible to combine multiple containers that work together)</li> </ul> <p>Since containers do not virtualise the hardware, containers must be built using the same architecture as the machine they are going to be deployed on. Containers built for one architecture cannot run on the other.</p>"},{"location":"1.getting-started-with-containers/#containers-and-your-workflow","title":"Containers and your workflow","text":"<p>There are a number of reasons for using containers in your daily work:</p> <ul> <li>Data reproducibility/provenance</li> <li>Cross-system portability</li> <li>Simplified collaboration</li> <li>Simplified software dependencies and management</li> <li>Consistent testing environment</li> </ul>"},{"location":"1.getting-started-with-containers/#terminology","title":"Terminology","text":"<p>We\u2019ll start with a brief note on the terminology used in this section of the course. We refer to both images and containers. What is the distinction between these two terms?</p> <p>Images are bundles of files including an operating system, software and potentially data and other application-related files. They may sometimes be referred to as a disk image or container image and they may be stored in different ways, perhaps as a single file, or as a group of files. Either way, we refer to this file, or collection of files, as an image.</p> <p>A container is a virtual environment that is based on an image. That is, the files, applications, tools, etc that are available within a running container are determined by the image that the container is started from. It may be possible to start multiple container instances from an image. You could, perhaps, consider an image to be a form of template from whi***ch running container instances can be started.</p> <p>A registry is a server application where images are stored and can be accessed by users. It can be public (e.g. Docker Hub) or private.</p> <p>To build an image we need a recipe. A recipe file is called a Definition File, or def file, in the Apptainer jargon and a Dockerfile in the Docker world.</p>"},{"location":"1.getting-started-with-containers/#container-engines","title":"Container engines","text":"<p>A number of tools are available to create, deploy and run containerised applications. Some of these will be covered throughout this tutorial:</p> <p>Commonly used engines</p> <p>Docker</p> <p></p> <p>The first engine to gain popularity, still widely used in the IT industry. Not very suitable for HPC as it requires root privileges to run.</p> <p>See the documentation for more information.</p> <p>Singularity</p> <p></p> <p>A simple, powerful root-less container engine for the HPC world. Originally developed at the Lawrence Berkeley National Laboratory.</p> <p>Apptainer</p> <p> A simple, powerful root-less container engine for the HPC world. Originally developed at the Lawrence Berkeley National Laboratory.</p> <p></p> <p>That concludes this container overview. The next episode looks in more detail at setting up your environment for running containers on the NeSI cluster.</p> <p>Key points</p> <ul> <li>Containers enable you to package up an application and its dependencies.</li> <li>By using containers, you can better enforce reproducibility, portability and share-ability of your computational workflows.</li> <li>Apptainer (and Singularity) are container platforms and are often used in cluster/HPC/research environments.</li> <li>Apptainer has a different security model to other container platforms, one of the key reasons that it is well suited to HPC and cluster environments.</li> <li>Apptainer has its own container image format based off the original Singularity Image Format (SIF).</li> <li>The apptainer command can be used to pull images from Docker Hub or other locations such as a website and run a container from an image file.</li> </ul>"},{"location":"2.container-cache/","title":"2. The Container Cache","text":"<p>Overview</p> <p>Questions</p> <ul> <li>Why does Apptainer use a local cache?</li> <li>Where does Apptainer store images?</li> <li>How do I configure my cache to work on NeSI?</li> </ul> <p>Objectives </p> <ul> <li>Learn about Apptainer\u2019s image cache.</li> <li>Learn howto setup your cache on Mahuika</li> </ul> <p>Verify the installation and check the version</p> <pre><code>$ apptainer --version\n</code></pre> <pre><code>apptainer version 1.3.0\n</code></pre>"},{"location":"2.container-cache/#using-the-image-cache-and-temporary-directories","title":"Using the image cache and temporary directories","text":"<p>Pull an ubuntu Linux image from DockerHub</p> <p>code</p> <pre><code>$ apptainer pull docker://ubuntu \n</code></pre> <pre><code>INFO:    Converting OCI blobs to SIF format\nINFO:    Starting build...\nGetting image source signatures\nCopying blob 3c645031de29 done   | \nCopying config 7af9ba4f0a done   | \nWriting manifest to image destination\n2024/04/25 12:26:02  info unpack layer: sha256:3c645031de2917ade93ec54b118d5d3e45de72ef580b8f419a8cdc41e01d042c\nINFO:    Creating SIF file...\n</code></pre> <p>So what we did here was to use the <code>docker://</code> URL to tell apptainer to go to DockerHub and pull the Ubuntu Docker image. Apptainer pulls the image and converts it into the image file format used by Apptainer and Singularity: <code>.sif</code>. The image file is save in our current directory as <code>ubuntu_latest.sif</code> and a cached copy is in the <code>$HOME/.apptainer/cache</code></p> <p>Apptainer doesn\u2019t have a local image repository in the same way as Docker, however, it does cache downloaded image files. Apptainer also uses a temporary directory for building images.</p> <p>If you delete the .sif image that you have pulled from a remote image repository such as DockerHub, and then pull it again, provided the image is unchanged from the version you previously pulled, you will be given a copy of the image file from your local cache rather than the image being downloaded again from the remote source. This removes unnecessary network transfers and is particularly useful for large images which may take some time to transfer over the network. To demonstrate this, remove the ubuntu_latest.sif file stored in your directory and then issue the pull command again:</p> <p>code</p> <pre><code>$ rm ubuntu_latest.sif\n$ apptainer pull docker://ubuntu\n</code></pre>"},{"location":"2.container-cache/#cleaning-the-apptainer-image-cache","title":"Cleaning the Apptainer image cache","text":"<p>We can remove images from the cache using the <code>apptainer cache clean</code> command. Running the command without any options will display a warning and ask you to confirm that you want to remove everything from your cache. This is very useful if you are running low on space or do not want to keep old images on disk.</p> <p>You can also remove specific images or all images of a particular type. Look at the output of <code>apptainer cache clean --help</code> for more information.</p> <p>Apptainer Cache and Temporary files  : How to change the default path</p> <p>By default, Apptainer uses <code>$HOME/.apptainer</code> as the location for cache and temporary files. </p> <p>You can change the location of the cache by setting environment variables to the cache and temporary directory locations you want to use. Those environment variables are: <code>APPTAINER_CACHEDIR</code> &amp; <code>APPTAINER_TMPDIR</code></p> <p>Key points</p> <ul> <li> <p>Apptainer caches downloaded images so that an unchanged image isn\u2019t downloaded again when it is requested using the <code>apptainer pull</code> command.</p> </li> <li> <p>You can free up space in the cache by removing all locally cached images or by specifying individual images to remove.</p> </li> </ul>"},{"location":"3.using-containers-to-run-commands/","title":"3. Using containers to run commands","text":""},{"location":"4.files-in-containers/","title":"4. Files in containers","text":""},{"location":"5.creating-container-images/","title":"5. Creating Container images","text":""},{"location":"6.building-container-imaged/","title":"6. Building Container Images","text":""}]}